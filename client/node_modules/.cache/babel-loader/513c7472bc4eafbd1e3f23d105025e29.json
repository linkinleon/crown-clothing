{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('im fired');\n  const collecitionRef = firestore.collection(\"collections\");\n  dispatch(fetchCollectionsStart());\n  collecitionRef.get().then(snapshot => {\n    const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/leon/Workspace/crown-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","collecitionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAEA,QAAMC,cAAc,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAvB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AACAJ,EAAAA,cAAc,CAACK,GAAf,GAAqBC,IAArB,CAA2BC,QAAD,IAAc;AACtC,UAAMC,aAAa,GAAGC,+BAA+B,CAACF,QAAD,CAArD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,aAAD,CAAxB,CAAR;AACD,GAHD,EAGGG,KAHH,CAGSC,KAAK,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAH1B;AAIH;AAED,OAAO,UAAUV,qBAAV,GAAkC;AACrC,QAAMT,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('im fired')\n\n    const collecitionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n    collecitionRef.get().then((snapshot) => {\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}"]},"metadata":{},"sourceType":"module"}